------------------------------------
Executive Summary Instructions To Run Experiments in Draft With the VM Image.

Boot up and open a terminal. Follow these three steps:

STEP 1:
Activate conda environment named telex
> source activate telex

STEP 2:
Go to the tests folder
> cd /home/telex/TeLEX/tests

STEP 3:
Execute sh script and wait for results to incrementally keep getting logged in  scale_gradient_10.log  
> ./runallgradientonly.sh

Don't worry if you get some warning about attempting to remove log file that is not present.

If you look inside runallgradientonly.sh script, it is calling
"python test_scale.py -i 10 -o gradient"
that is, run test_scale.py with iterations set to 10 and choice of optimizer set to gradient. This will run all 12 STL learning problems (10 times each) and keep reporting the results to the screen as well as summary (mean and standard deviation) results to scale_gradient_10.log file. The summaries in scale_gradient_10.log have intermediate tables after each set of 10 repetitions. synth.log has logging from the tool.

Look at log files in /home/telex/TeLEX/tests/scale-results/run-gradient/ for what to expect. 

Similarly, do
> ./runall.sh 
to run both gradient and non-gradient optimizers. Note that non-gradient is very slow as reported in the draft. Its results are also cached in 
/home/telex/TeLEX/tests/scale-results/run-nogradient/

--------------------------------------------------------

Detailed  Instructions and Information
--------------------------------------------------------

Spec of Host Machine Used for Experiments
------------------------------------

CPU model name  : Intel(R) Core(TM) i5-2450M CPU @ 2.50GHz
cache size      : 3072 KB
siblings        : 4
MemTotal        : 3989704 kB

>uname -a
Linux sjlinux1 3.16.0-77-generic #99~14.04.1-Ubuntu SMP Tue Jun 28 19:17:10 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

Spec of Virtual Box
------------------------------------

Virtual Box: Oracle VM VirtualBox Manager Version 5.1.14 r112924
Create Virtual Machine: 
Name - telexVM, Type - Linux, Version - Ubuntu 
Memory - 1GB
VirtualBox Disk Image (dynamically allocated) of size 8 GB
Hard Disk File type: VDI
Disk Image Used: ubuntu-14.04.5-desktop-i386.iso

Username: telex
Password: telex

uname -a on Virtual Machine
Linux telex-VirtualBox 4.4.0-31-generic #50~14.04.1-Ubuntu

Setting Up Python and Conda
----------------------------------
Downloaded Conda for 32 bit Ubuntu Linux from https://docs.continuum.io/anaconda/install#linux-install: Anaconda2-4.2.0-Linux-x86_64.sh

Install it by running.
> bash Anaconda2-4.2.0-Linux-x86_64.sh
Installed to /home/telex/anaconda2
Added it to path in ~/.bashrc

Installed emacs 

Added sources to ~/TeLEX

Python 2.7 comes preinstalled with Ubuntu 14.04


TeLEx Installation
-----------------------------------
> conda env create -f telex.yml
This will install all dependencies.
Fetched a bunch of packages listed in yml file.

Added ~/TeLEX to PYTHONPATH in .bashrc



TeLEx Tool Distribution
-----------------------------------
Location in VB image:

Structure:
.
├── README.md  [Contains instructions for installation and usage]
├── setup.py   [ Python package installation file ]
├── telex      [ Source Directory]
│   ├── __init__.py     [Package init ]
│   ├── inputreader.py  [Used to read csv trace files]
│   ├── parametrizer.py [Used to manipulate parameters in STL template]
│   ├── scorer.py       [Used to compute score under various metrics]
│   ├── stl.py          [STL module]
│   └── synth.py        [Learner module using numerical optimization]
├── telex.yml   [Conda installation config]        
└── tests       [Test Directory]
    ├── runallgradientonly.sh   [shell script to run gradient-based learning]
    ├── runall.sh               [shell script to regenerate all experiments in submitted draft]
    ├── scale			[directory with the xSin(x*x) trace]
    ├── scale-results		[all results from experiments reported in submitted draft]
    ├── test_learn.py		[script for some additional tests with various STL templates]
    ├── test_metriccalc.py
    ├── test_robustcalc.py
    ├── test_scale.py		[python script used in experiments in submitted draft; shell script calls this]
    └── traces			[directory with small traces used in test_learn.py]


Guideline for reproducing results in submission
-------------------------------------------------

Boot up and open a terminal.

Activate conda environment named telex
> source activate telex

Go to the tests folder
> cd /home/telex/TeLEX/tests

Run the high-level script
> ./runallgradientonly.sh
If you look inside sh script, it is calling
python test_scale.py -i 10 -o gradient
that is, run test_scale.py with iterations set to 10
and choice of optimizer set to gradient.
This will run all 12 STL learning problems (10 times each)
and keep reporting the results to the screen as well as summary
results to scale_gradient_10.log file.
The summaries in scale_gradient_10.log have intermediate tables
after each set of 10 repetitions. synth.log has logging from
the tool.

Look at log files in /home/telex/TeLEX/tests/scale-results/run-gradient/
for what to expect. 

Similarly, do
> ./runall.sh 
to run both gradient and non-gradient optimizers.
Note that non-gradient is very slow as reported in the
draft. Its results are also cached in 
/home/telex/TeLEX/tests/scale-results/run-nogradient/

The other test_*.py examples in tests directory of
the tool distribution further illustrate
how TeLEX can be used. 

If you want to go one level under the hood,
look at python test_scale.py -i 10 -o gradient
which recieved two inputs: number of iterations for
each testcase and the optimization method which can be
gradient or nogradient.
In the python file, you will see how STL templates
are provided along with trace directory, and then
call is made to the main learning function in synth.py:
telex.synth.synthSTLParam 
This is the function described in Tool Architecture 
section of the draft. 
 
Hope you have fun playing with the tool! 
